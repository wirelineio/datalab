#
# Types
#
scalar Date

### SERVICES

type Service {
  id: ID!
  type: String!
  name: String!
  description: String!
  enabled: Boolean!
  url: String!
}

### ORGS

type Stage {
  id: ID!
  name: String!
}

type Partner {
  id: ID!
  name: String!
  url: String
  goals: String
  stage: Stage
  contacts: [Contact!]
}

type RemoteReference {
  id: ID!
  serviceId: ID!
}

type Contact {
  id: ID!
  name: String
  email: String
  phone: String
  ref: RemoteReference
}

input InputRemoteReference {
  id: ID!
  serviceId: ID!
}

#
# Root Query
#

type Query {

  ### SERVICES

  getAllServices: [Service]!

  ### ORGS

  getAllPartners: [Partner]!

  getAllStages: [Stage]!

}

#
# Root Mutation
#

type Mutation {

  ### SERVICES

  switchService(id: ID!): Service!

  ### ORGS

  createContact(name: String, email: String, phone: String, ref: InputRemoteReference): Contact

  updateContact(id: ID!, name: String, email: String, phone: String, ref: InputRemoteReference): Contact

  createPartner(name: String!, url: String, goals: String, stageId: ID): Partner

  updatePartner(id: ID!, name: String, url: String, goals: String, stageId: ID): Partner

  addContactToPartner(id: ID!, contactId: ID!): Partner

  deleteContactToPartner(id: ID!, contactId: ID!): Partner

  moveContactToPartner(id: ID!, toPartner: ID!, contactId: ID!): [Partner!]

  deletePartner(id: ID!): ID

  createStage(name: String!): Stage

  updateStage(id: ID!, name: String!): Stage

  deleteStage(id: ID!): ID
}

#
# Schema
#
schema {
  query: Query
  mutation: Mutation
}
