#
# Types
#
scalar Date

type Stage {
  id: ID!
  name: String!
}

type Partner {
  id: ID!
  name: String!
  url: String
  goals: String
  stage: Stage
}

#type Contact {
  #id: ID!
  #name: String!
  #email: String!
  #phone: String!
  #company: Partner
  #createdAt: Date!
#}

#input ContactInput {
  #id: ID
  #name: String
  #email: String
  #phone: String
  #companyId: ID
  #stageId: ID
#}

#
# Root Query
#

type Query {
  #getAllContacts: [Contact]!

  #getContact(id: ID!): Contact

  getAllPartners: [Partner]!

  getAllStages: [Stage]!
}

#
# Root Mutation
#

type Mutation {
  #createContact(name: String!, email: String!, phone: String!, companyId: ID!, stageId: ID!): Contact!

  #updateContact(id: ID!, name: String, email: String, phone: String, companyId: ID, stageId: ID): Contact

  #updateMultipleContacts(ids: [ID!]!, name: String, email: String, phone: String, companyId: ID, stageId: ID): [Contact]

  #updateOrCreateContacts(contacts: [ContactInput!]!): [Contact]

  #deleteContact(id: ID!): ID

  #deleteAllContacts: Boolean,

  createPartner(name: String!, url: String, goals: String, stageId: ID): Partner

  updatePartner(id: ID!, name: String, url: String, goals: String, stageId: ID): Partner

  deletePartner(id: ID!): ID

  createStage(name: String!): Stage!

  deleteStage(id: ID!): ID
}

#
# Schema
#
schema {
  query: Query
  mutation: Mutation
}
